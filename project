-- Table structure 

CREATE TABLE `students` (
  `ID` int(11) NOT NULL,
  `LAST_NAME` varchar(50) NOT NULL,
  `FIRST_NAME` varchar(50) NOT NULL,
  `MATH` INT(11) NOT NULL,
  `PHYSIC` INT(50) NOT NULL,
  `SCIENCE` INT(50) NOT NULL,
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO `users` (`ID`, `LAST_NAME`, `FIRST_NAME`, `MATH`, `PHYSIC`, `SCIENCE`) VALUES
(1,'Connor', 'Phillips', 150, 80, 60),
(2,'Bennett', 'David', 100, 60, 30);
====================================================================================================
Dao :
package student;
import java.sql.Connection;
import java.sql.DriverManager;

    public Connection getConnection() throws Exception{
        
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/databasename","root","1234");
        if(con != null){
        return con;
        }     
        return null; 
    }
    
    public void closeConnection(Connection con) throws Exception{
        
        if(con != null){
            con.close();
    }
   }  
}
====================================================================================================
DaoList Interface :

package student;
import java.util.List;
import javafx.collections.ObservableList;

public interface DaoList<T> {

    public ObservableList<T>
    loadAll() throws Exception;

    public int insert(T t) throws Exception;
    public int update(T t) throws Exception;
    public int delete(T t) throws Exception;   
}
====================================================================================================
StudentDao :

package student;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javax.swing.JOptionPane;

public class StudentDao extends Dao implements DaoList<Student> {

    public static StudentDao studentDao;

    public StudentDao() {

    }

    public static StudentDao getInstance() {

        if (studentDao == null) {
            studentDao = new StudentDao();
        }
        return studentDao;
    }
 
 @Override
    public ObservableList<Student> loadAll() throws Exception {

        Connection con = null;
        //studentsVo studentVo = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        ObservableList<Sudent> list = FXCollections.observableArrayList();
        try {
            con = getConnection();

            String sql = "SELECT * FROM users ORDER BY ID ASC";
            ps = con.prepareStatement(sql);
            rs = ps.executeQuery();
            while (rs.next()) {
                Student student = new Student();
                student.setFirstName(rs.getString("FIRST_NAME"));
                student.setLastName(rs.getString("LAST_NAME"));
                student.setFirstName(rs.getString("FIRST_NAME"));
                int math = rs.getInt("MATH");
                int physic = rs.getInt("PHYSIC");
                int science rs.getInt("SCIENCE");
				int average = (math+physic+science)/3;
                student.setGrade(String.valueOf(average));
                list.add(student);
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } finally {
            rs.close();
            ps.close();
            closeConnection(con);
        }
        return list;
}

@Override
    public int insert (Student student) throws Exception {

        Connection con = null;
        PreparedStatement ps = null;
        int count = 0;
        try {
            con = getConnection();
            String sql = "INSERT INTO students(LAST_NAME,FIRST_NAME,MATH,PHYSIC,SCIENCE) VALUES(?,?,?,?,?)";
            ps = con.prepareStatement(sql);
            ps.setString(1, student.getLastName());
            ps.setString(2, student.getFirstName());
            String strMath = student.getMath();
            int math = Integer.parseInt(strMath);
            ps.setInt(5,math);
			String strPhysic = student.getPhysic();
			int physic = Integer.parseInt(strPhysic);
            ps.setInt(6,physic);
 			String strScience = student.getScience();
			int science = Integer.parseInt(strScience);
            ps.setInt(5,science);
            count = ps.executeUpdate();
			
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        } finally {
            ps.close();
            closeConnection(con);
        }
        return count;
    }
	
@Override
    public int update (Student student) throws Exception {
		//To do
	}
	
@Override
    public int delete (Student student) throws Exception {
		//to do
	}
}
====================================================================================================
Student Model:
package student;

import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

 public class Student {
        private final StringProperty lastname = new SimpleStringProperty();
        private final StringProperty firstname = new SimpleStringProperty();
        private final StringProperty math = new SimpleStringProperty();
        private final StringProperty physic = new SimpleStringProperty();
        private final StringProperty science = new SimpleStringProperty();
		
        public Student() {
            this("", "", "", "", "");
        }

        public Person(String lastname, String firstname, String math, String physic, String science) {
            setLastName(lastname);
            setFirstName(firstname);
            setMath(math);
            setPhysic(physic);
            setScience(science);
  
        }
        
        public final StringProperty LastNameProperty() {
            return this.lastname;
        }

        public final java.lang.String getLastName() {
            return this.LastNameProperty().get();
        }

        public final void setLastName(final java.lang.String Lastname) {
            this.LastNameProperty().set(Lastname);
        }
		
        public final StringProperty FirstNameProperty() {
            return this.firstname;
        }

        public final java.lang.String getFirstName() {
            return this.FirstNameProperty().get();
        }

        public final void setFirstName(final java.lang.String firstname) {
            this.FirstNameProperty().set(firstname);
        }

        public final StringProperty MathProperty() {
            return this.math;
        }

        public final java.lang.String getMath() {
            return this.MathProperty().get();
        }

        public final void setMath(final java.lang.String math) {
            this.MathProperty().set(math);
        }
        
        public final StringProperty PhysicProperty() {
            return this.physic;
        }

        public final java.lang.String getPhysic() {
            return this.PhysicProperty().get();
        }

        public final void setPhysic(final java.lang.String physic) {
            this.PhysicProperty().set(physic);
        }

        public final StringProperty ScienceProperty() {
            return this.science;
        }

        public final java.lang.String getScience() {
            return this.ScienceProperty().get();
        }

        public final void setScience(final java.lang.String science) {
            this.ScienceProperty().set(science);
        }
    }
====================================================================================================
StudentView:

import java.util.function.Function;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.application.Application; 
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Label;
import javafx.scene.control.TableCell;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;
import javax.swing.JOptionPane;

public class StudentView extends Application {
    @Override
    public void start(Stage primaryStage) throws Exception {
        GridPane grid = new GridPane();
        grid.setAlignment(Pos.CENTER);
        grid.setHgap(20);
        grid.setVgap(20);

        TableView<Student> table = new TableView<>();
        table.setEditable(true);
            StudentDao dao = new StudentDao();
            ObservableList<Student> list = dao.loadAll();
        table.setItems(list);
        TableColumn<Student, String> FirstNameCol = createColumn("FIRST NAME",
                Student::LastNameProperty, 150);
        TableColumn<Student, String> LastNameCol = createColumn("LAST NAME",
                Student::FirstNameProperty, 150);
        TableColumn<Student, String> GradeCol = createColumn("GRADE",
                Student::GradeProperty, 150);

        TableColumn<Student, Void> indexCol = createColumn("N.O", student -> null, 35);

        indexCol.setCellFactory(col -> new TableCell<Student, Void>() {
            @Override
            public void updateIndex(int index) {
                super.updateIndex(index);
                if (isEmpty() || index < 0) {
                    setText(null);
                } else {
                    setText(Integer.toString(index+1));
                }
            }
        });

        table.getColumns().add(indexCol);
        table.getColumns().add(FirstNameCol);
        table.getColumns().add(LastNameCol);
        table.getColumns().add(GradeCol);
        Button btn = new Button("Submit");
        grid.add(table,0,0);
        grid.add(btn,1,0);
        grid.add(txtFirstName,0,2);
        grid.add(txtLastName,0,1);
        grid.add(txtMath,0,3);
        grid.add(txtPhysic,0,3);
        grid.add(txtScience,0,3);
        btn.setOnAction(event->
        {
        String firstname = txtFirstName.getText();
        String lastname = txtLastName.getText();
        String math = txtMath.getText();
        String physic = txtPhysic.getText();
        String science = txtScience.getText();
        Student student = new Student();
        student.setFirstName(firstname);
        student.setLastName(lastname);
        student.setMath(math);
        student.setPhysic(physic);
        student.setScene(science);
        try {
            int count = StudentDao.getInstance().insert(student);
            if (count == 1) {
                 list.add(student);
            } else {
                JOptionPane.showMessageDialog(null, "Faild");
            }
        } catch (Exception ex) {}
        });
        primaryStage.setScene(new Scene(new BorderPane(grid)));
        primaryStage.show();
    }

    private <S, T> TableColumn<S, T> createColumn(String title,
            Function<S, ObservableValue<T>> property, double width) {
        TableColumn<S, T> col = new TableColumn<>(title);
        col.setCellValueFactory(cellData -> property.apply(cellData.getValue()));
        col.setPrefWidth(width);
        return col;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
